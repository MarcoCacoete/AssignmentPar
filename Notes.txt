1. Define the input data (e.g., array/vector) and its size
2. Define the output buffer (e.g., array/vector) and its size
3. Create device buffers for input (read-only) and output (read-write)
4. Write input data to the device input buffer
5. Initialize the output buffer on the device (e.g., set to zeros if needed)
6. Create the kernel from the program and set its arguments (input and output buffers)
7. Run the kernel with appropriate global work size
8. Read the output buffer back to the host
9. Use the results (e.g., process or print)




Blelloch Algorithm Overview
Purpose: Computes prefix sum (cumulative sum) in parallel.

Two Phases: Up-sweep (reduce) and down-sweep (scan).

Use Case: Cumulative histogram for back projection in OpenCL.

Example: [1, 2, 3, 4, 5, 6, 7, 8]
Up-Sweep (Reduce):
Step 1 (stride 1): [1, 3, 3, 7, 5, 11, 7, 15] (pair sums).

Step 2 (stride 2): [1, 3, 3, 10, 5, 11, 7, 26].

Step 3 (stride 4): [1, 3, 3, 10, 5, 11, 7, 36] (root = total).

Notes: Bottom-up, sums pairs, stores in right child.

Down-Sweep (Scan):
Start: [1, 3, 3, 10, 5, 11, 7, 0] (root = 0).

Step 1 (stride 4): [1, 3, 3, 0, 5, 11, 7, 10].

Step 2 (stride 2): [1, 0, 3, 3, 5, 10, 7, 21].

Step 3 (stride 1): [0, 1, 3, 6, 10, 15, 21, 28].

Notes: Top-down, left child = parent, right child = parent + old left.

Result: Exclusive prefix sum [0, 1, 3, 6, 10, 15, 21, 28]:
Index i = sum of original elements before i.

e.g., Index 2 = 3 = 1 + 2 (before original 3).

Back Projection in Grayscale
Input: Grayscale image [0, 0, 1, 3, 3, 3].

Histogram: [2, 1, 0, 3] (counts for 0, 1, 2, 3).

Blelloch:
Up-sweep: [2, 3, 0, 6].

Down-sweep: [0, 2, 3, 3].

Normalize: [0, 2/6, 3/6, 3/6] = [0, 0.33, 0.5, 0.5].

Back Project: [0, 0, 85, 128, 128, 128] (scaled to 255).

OpenCL: Parallel histogram with atomics, Blelloch in local memory, pixel mapping kernel.

Key Points
Up-Sweep: Builds tree of sums, root = total.

Down-Sweep: Distributes sums for exclusive scan.

Histogram Use: Cumulative sums map pixel intensities to probabilities.

